version: '3'
services:
  web:
    image: maplegend/minute-of-fame
    build: .
    command: /bin/sh -c "python manage.py migrate && python manage.py createcachetable && python manage.py runserver 0.0.0.0:80"
    env_file:
      - ./service.env
      - ./web.env
      - ./db.env
      - ./secret.env
    ports:
      - 80:80
    environment:
      - NODE_ENV=production
      - RHOST=redis
    networks:
      - main
    depends_on:
      - redis
      - db
      - multi_connection

  distributor:
    env_file:
      - ./service.env
      - ./secret.env
    image: maplegend/websocket-distributor:master
    hostname: distributor
    networks:
      - main
    depends_on:
      - web
    ports:
      - 4321:4321

  chat:
    env_file:
      - ./service.env
    image: maplegend/mof-chat:master
    hostname: chat
    networks:
      - main
    depends_on:
      - distributor

  poll:
    env_file:
      - ./service.env
    image: maplegend/mof-poll:master
    hostname: chat
    networks:
      - main
    depends_on:
      - distributor

  multi_connection:
    image: maplegend/multi_connection:master
    command: node server --port 9001
    networks:
      - main
    ports:
      - 9001:9001

  redis:
    image: redis:4.0.5-alpine
    command: ["redis-server", "--appendonly", "yes"]
    hostname: redis
    networks:
      - main

  db:
    env_file:
      - ./db.env
    image: postgres
    restart: always
    hostname: db
    networks:
      - main
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - main

networks:
  main: